<?php
// Auto generated by the build:migrations command

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateTunerchipTunesTable extends Migration
{
	/**
	 * Run the migrations.
	 *
	 * @return void
	 */
	public function up()
	{
		// Make enums work pre laravel 10
		Schema::getConnection()->getDoctrineConnection()->getDatabasePlatform()->registerDoctrineTypeMapping("enum", "string");

		$indexes = $this->collectIndexedColumns();
		$columns = Schema::getColumnListing("tunerchip_tunes");

		$func = Schema::hasTable("tunerchip_tunes") ? "table" : "create";

		Schema::$func("tunerchip_tunes", function (Blueprint $table) use ($columns, $indexes) {
			!in_array("tune_id", $columns) && $table->integer("tune_id")->autoIncrement();
			!in_array("character_id", $columns) && $table->integer("character_id")->nullable();
			!in_array("name", $columns) && $table->string("name", 255)->nullable();
			!in_array("model_name", $columns) && $table->string("model_name", 255)->nullable();
			!in_array("offsets", $columns) && $table->longText("offsets")->nullable();
			!in_array("timestamp", $columns) && $table->integer("timestamp")->nullable();

			!in_array("tune_id", $indexes) && $table->index("tune_id");
			!in_array("character_id", $indexes) && $table->index("character_id");
			!in_array("name", $indexes) && $table->index("name");
			!in_array("model_name", $indexes) && $table->index("model_name");
			!in_array("timestamp", $indexes) && $table->index("timestamp");
		});
	}

	/**
	 * Reverse the migrations.
	 *
	 * @return void
	 */
	public function down()
	{
		Schema::dropIfExists("tunerchip_tunes");
	}

	/**
	 * Collect all columns that are indexed in the tunerchip_tunes table.
	 *
	 * @return array
	 */
	private function collectIndexedColumns(): array
	{
		if (!Schema::hasTable("tunerchip_tunes")) {
			return [];
		}

		$sm  = Schema::getConnection()->getDoctrineSchemaManager();
		$tbl = $sm->introspectTable("tunerchip_tunes");

		$indexes = array_reduce($tbl->getIndexes(), function ($carry, $index) {
			return array_merge($carry, $index->getColumns());
		}, []);

		return array_values(array_unique($indexes));
	}
}