<?php
// Auto generated by the build:migrations command

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateExplosionEventsTable extends Migration
{
	/**
	 * Run the migrations.
	 *
	 * @return void
	 */
	public function up()
	{
		// Make enums work pre laravel 10
		Schema::getConnection()->getDoctrineConnection()->getDatabasePlatform()->registerDoctrineTypeMapping("enum", "string");

		$indexes = $this->collectIndexedColumns();
		$columns = Schema::getColumnListing("explosion_events");

		$func = Schema::hasTable("explosion_events") ? "table" : "create";

		Schema::$func("explosion_events", function (Blueprint $table) use ($columns, $indexes) {
			!in_array("id", $columns) && $table->integer("id")->autoIncrement();
			!in_array("license_identifier", $columns) && $table->string("license_identifier", 50)->nullable();
			!in_array("timestamp", $columns) && $table->integer("timestamp")->nullable();
			!in_array("distance", $columns) && $table->double("distance")->nullable();
			!in_array("canceled", $columns) && $table->tinyInteger("canceled")->nullable();
			!in_array("explosionType", $columns) && $table->integer("explosionType")->nullable();
			!in_array("ownerNetId", $columns) && $table->integer("ownerNetId")->nullable();
			!in_array("posX", $columns) && $table->double("posX")->nullable();
			!in_array("posY", $columns) && $table->double("posY")->nullable();
			!in_array("posZ", $columns) && $table->double("posZ")->nullable();
			!in_array("posX224", $columns) && $table->double("posX224")->nullable();
			!in_array("posY224", $columns) && $table->double("posY224")->nullable();
			!in_array("posZ224", $columns) && $table->double("posZ224")->nullable();
			!in_array("unkX", $columns) && $table->double("unkX")->nullable();
			!in_array("unkY", $columns) && $table->double("unkY")->nullable();
			!in_array("unkZ", $columns) && $table->double("unkZ")->nullable();
			!in_array("cameraShake", $columns) && $table->double("cameraShake")->nullable();
			!in_array("damageScale", $columns) && $table->double("damageScale")->nullable();
			!in_array("isInvisible", $columns) && $table->tinyInteger("isInvisible")->nullable();
			!in_array("isAudible", $columns) && $table->tinyInteger("isAudible")->nullable();
			!in_array("f104", $columns) && $table->integer("f104")->nullable();
			!in_array("f126", $columns) && $table->tinyInteger("f126")->nullable();
			!in_array("f164", $columns) && $table->bigInteger("f164")->nullable();
			!in_array("f186", $columns) && $table->integer("f186")->nullable();
			!in_array("f189", $columns) && $table->tinyInteger("f189")->nullable();
			!in_array("f190", $columns) && $table->tinyInteger("f190")->nullable();
			!in_array("f191", $columns) && $table->tinyInteger("f191")->nullable();
			!in_array("f208", $columns) && $table->integer("f208")->nullable();
			!in_array("f210", $columns) && $table->integer("f210")->nullable();
			!in_array("f214", $columns) && $table->integer("f214")->nullable();
			!in_array("f216", $columns) && $table->tinyInteger("f216")->nullable();
			!in_array("f218", $columns) && $table->integer("f218")->nullable();
			!in_array("f240", $columns) && $table->tinyInteger("f240")->nullable();
			!in_array("f241", $columns) && $table->tinyInteger("f241")->nullable();
			!in_array("f242", $columns) && $table->tinyInteger("f242")->nullable();

			!in_array("license_identifier", $indexes) && $table->index("license_identifier");
			!in_array("explosionType", $indexes) && $table->index("explosionType");
		});
	}

	/**
	 * Reverse the migrations.
	 *
	 * @return void
	 */
	public function down()
	{
		Schema::dropIfExists("explosion_events");
	}

	/**
	 * Collect all columns that are indexed in the explosion_events table.
	 *
	 * @return array
	 */
	private function collectIndexedColumns(): array
	{
		if (!Schema::hasTable("explosion_events")) {
			return [];
		}

		$sm  = Schema::getConnection()->getDoctrineSchemaManager();
		$tbl = $sm->introspectTable("explosion_events");

		$indexes = array_reduce($tbl->getIndexes(), function ($carry, $index) {
			return array_merge($carry, $index->getColumns());
		}, []);

		return array_values(array_unique($indexes));
	}
}